""" Output configuration files, current support data, geo, xyz.
11-10-2012: add head in geo output
01-04-2013: debug toPdb
@todo: finish to Top
"""
import numpy as np
from cons import ELEMENT2MASS, ELEMENT2ATN, A2Bohr
from utilities import lattice2v

def toReaxLammps(system, outfile="lammps.data"):
    """ output to lammps data file
    """

    o = open(outfile, 'w')
    o.write("# \n")
    o.write("\n")
    o.write("%d atoms\n\n"%len(system.atoms))
    o.write("%d atom types\n\n"%len(system.map))
    pbc = system.pbc
    if len(pbc) >= 6:
        if pbc[3] == 90.0 and pbc[4] == 90 and pbc[5] == 90:
            o.write(" 0.0 %12.7f xlo xhi\n"%pbc[0])
            o.write(" 0.0 %12.7f ylo yhi\n"%pbc[1])
            o.write(" 0.0 %12.7f zlo zhi\n"%pbc[2])
        else:
            xx, xy, xz, yy, yz, zz = lattice2v(pbc)
            o.write(" 0.0 %12.7f xlo xhi\n"%xx)
            o.write(" 0.0 %12.7f ylo yhi\n"%yy)
            o.write(" 0.0 %12.7f zlo zhi\n"%zz)
            o.write("%12.7f%12.7f%12.7f xy xz yz\n\n"%(xy, xz, yz))        
    else:
        print("Warning: No box found. Using a default box 5.0 * 5.0 * 5.0")
        o.write(" %12.7f %12.7f xlo xhi\n"%(-25.0, 25.0))
        o.write(" %12.7f %12.7f ylo yhi\n"%(-25.0, 25.0))
        o.write(" %12.7f %12.7f zlo zhi\n"%(-25.0, 25.0))
    o.write("Masses\n\n")

    print(system.map)
    for i in system.map:
        # atom name 
        atn = ''
        for j in i[1]:
            if j.isdigit():
                break
            atn += j
        o.write("%d %s # %s\n"%(i[0], ELEMENT2MASS[atn], atn))
    o.write("\n")
    o.write("Atoms\n")
    o.write("\n")

    counter = 1
    for i in system.atoms:
        line = ''
        line += "%-6d"%counter
        line += "%3d"%i.type1
        line += "%10.6f"%i.charge
        line += "%20.9f"%i.x[0]
        line += "%20.9f"%i.x[1]
        line += "%20.9f"%i.x[2]
        line += "\n"
        o.write(line)
        counter += 1

    o.close()
    
def toGeo(system, outfile="test.geo"):
    """ output to geo file format
    """
    o = open(outfile, 'w')
    if system.pbc:
        o.write("%s\n"%"XTLGRF 200")
    else:
        o.write("%s\n"%system.geotag)
    o.write("DESCRP %s\n"%system.name)
    o.write("REMARK generated by simulation python\n")
    if len(system.redundant) > 0:
        for i in system.redundant:
            if i[0] == "B":
                a1 = int(i[1])
                a2 = int(i[2])
                bond = float(i[3])
                line = "BOND RESTRAINT    %d   %d  %.4f 7500.00  1.0000  0.0000000       0       0\n"%(a1, a2, bond)
                o.write(line)
            elif i[0] == "D":
                a1 = int(i[1])
                a2 = int(i[2])
                a3 = int(i[3])
                a4 = int(i[4])
                angle = float(i[5])
                line = "TORSION RESTRAINT    %d   %d   %d   %d  %.4f  500.00  5.0000  0.0000000\n"%(a1, a2, a3, a4, angle)
                o.write(line)
    #o.write("FORMAT ATOM   (a6,1x,i5,1x,a5,1x,a3,1x,a1,1x,a5,3f10.5,1x,a5,i3,i2,1x,f8.5)\n")
    if system.pbc:
        o.write("CRYSTX %s\n"%(''.join(["%11.5f"%i for i in system.pbc])))
    counter = 1
    for i in system.atoms:
        line = ''
        line += "%6s"%"HETATM"
        line += " "
        line += "%5d"%counter
        line += " "
        line += "%-5s"%i.name
        line += "%12s"%""
        line += "%10.5f"%i.x[0]
        line += "%10.5f"%i.x[1]
        line += "%10.5f"%i.x[2]
        line += "%4s"%" "
        line += "%-2s"%i.element
        line += "%3d"%0
        line += "%2d"%0
        line += "%9.5f"%0
        line += "\n"
        o.write(line)
        counter += 1
    o.write("END\n")
    o.write("\n")
    o.close()

def toXyz(system, outfile="test.xyz"):
    """ output to xyz file format
    """
    o = open(outfile, 'w')
    o.write("%d\n"%len(system.atoms))
    o.write("%s\n"%system.name)
    for i in system.atoms:
        line = ''
        if len(i.element) > 0:
            line += "%-6s"%i.element
        else:
            line += "%-6s"%i.name
        line += "%10.4f"%i.x[0]
        line += "%10.4f"%i.x[1]
        line += "%10.4f"%i.x[2]
        line += "\n"
        o.write(line)
    o.close()

def toMusic(system, outfile="test.music"):
    """ output to music file format
    """
    o = open(outfile, 'w')
    o.write("%d\n"%len(system.atoms))
    n = 1
    for i in system.atoms:
        line = ''
        line += "%-8d"%n
        line += "%10.4f"%i.x[0]
        line += "%10.4f"%i.x[1]
        line += "%10.4f"%i.x[2]
        line += "%6s"%i.element
        line += " 0.0 0 0"
        line += "\n"
        o.write(line)
        n += 1
    o.close()


def toPdb(system, outfile="test.pdb", element=0):
    """ output to pdb file format
    """
    o = open(outfile, 'w')
    #o.write("TITLE %s\n"%system.name)
    o.write("REMARK Generated by simpy\n")
    #print system.pbc
    if system.pbc:
        o.write("CRYST1")
        o.write("".join(["%9.3f"%i for i in system.pbc[:3]]))
        o.write("".join(["%7.2f"%i for i in system.pbc[3:]]))
        o.write(" P 1           1\n")
    o.write("MODEL        1\n")
    counter = 1
    for i in system.atoms:
        o.write("HETATM")
        n_id = counter
        if counter > 99999: 
            n_id = counter/1000
        o.write("%5d"%n_id)
        if len(i.name) > 4:
            i.name = i.name[:4]
        if element:
            i.name = i.element
        o.write("%4s"%i.name)
        o.write("%5s"%"LIG")
        if counter > 99999: 
            n_id = counter/1000
        o.write("%6d"%n_id)
        o.write("%12.2f"%i.x[0])
        o.write("%8.2f"%i.x[1])
        o.write("%8.2f"%i.x[2])
        o.write("%6.2f"%1.0)
        o.write("%6.2f"%0.0)
        o.write("%12s"%i.name)
        o.write("\n")
        counter += 1
    o.write("TER\n")
    o.write("ENDMDL\n")
    o.close()

def toGjf(system, outfile="g03out.gjf"):
    """output the gjf file
    """
    o = open(outfile, "w")
    if len(system.options) > 0:
        for i in system.options:
            o.write(i.strip() + '\n')
    if len(system.methods) > 0:
        for i in system.methods:
            o.write("# " + i.strip() + '\n')
    o.write('\n')
    o.write(system.name + "\n")
    o.write('\n')
    o.write('%d %d\n'%(system.charge, system.spin))
    if len(system.atoms) > 0:
        for i in system.atoms:
            o.write("%-5s"%i.name)
            o.write("%10.5f"%i.x[0])
            o.write("%10.5f"%i.x[1])
            o.write("%10.5f"%i.x[2])
            o.write("\n")
    o.write('\n')
    if len(system.connect) > 0:
        for i in system.connect:
            o.write(" " + i.strip() + '\n')

    o.write('\n')
    if len(system.redundant) > 0:
        for i in system.redundant:
            o.write(" ".join(i) + '\n')
            
    o.write('\n')
    o.write('\n')
    o.write('\n')
    o.close()

def toTop(system, outfile="topol.top"):
    """output the top file
    """
    o = open(outfile, "w")
    o.write('include "vdw.itp"\n')
    o.write("[ moleculetype ]\n")
    o.write("simpy     3\n")
    o.write("\n")
    o.write("[ atoms ]\n")
    """
         1        o_2w     1         WAT           O     1     -0.8476    15.99940
    [ system ]
    ; Name
    HEP_2

    [ molecules ]
    ;      Compound     #mols
    WAT_1  1024
    HEP_2     1
    """

def toDump(system, outfile="output.dump"):
    """Output the dump file
    """
    o = open(outfile, "w")
    o.write("ITEM: TIMESTEP\n")
    o.write("%d\n"%system.step)
    o.write("ITEM: NUMBER OF ATOMS\n")
    o.write("%d\n"%len(system.atoms))
    # write the pbc
    pbc = system.pbc
    """ITEM: BOX BOUNDS xy xz yz xx yy zz 
       xlo_bound xhi_bound xy
       ylo_bound yhi_bound xz
       zlo_bound zhi_bound yz 
    """
    if len(pbc) >= 6:
        if pbc[3] == 90.0 and pbc[4] == 90 and pbc[5] == 90:
            o.write("ITEM: BOX BOUNDS pp pp pp\n")
            o.write(" 0.0 %9.4f 0.0\n"%pbc[0])
            o.write(" 0.0 %9.4f 0.0\n"%pbc[1])
            o.write(" 0.0 %9.4f 0.0\n"%pbc[2])
        else:
            o.write("ITEM: BOX BOUNDS xy xz yz pp pp pp\n")
            xx, xy, xz, yy, yz, zz = lattice2v(pbc)
            o.write(" %9.4f %9.4f %9.4f\n"%(xz, xx, xy))
            o.write(" 0.0 %9.4f %9.4f\n"%(yy, xz))
            o.write(" 0.0 %9.4f %9.4f\n"%(zz, yz))
    else:
        print("Warning: No box found. Using a default box 5.0 * 5.0 * 5.0")
        o.write(" 0.0 %9.4f xlo xhi\n"%5.0)
        o.write(" 0.0 %9.4f ylo yhi\n"%5.0)
        o.write(" 0.0 %9.4f zlo zhi\n"%5.0)
    o.write("ITEM: ATOMS id type x y z\n")

    for i in system.atoms:
        o.write("%-9d"%i.an)
        o.write("%6d"%i.type1)
        o.write("%14.6f"%i.x[0])
        o.write("%14.6f"%i.x[1])
        o.write("%14.6f"%i.x[2])
        o.write("\n")
    o.close()

def toMsd(system, outfile="dff.msd"):
    """Output the msd file
    """
    o = open(outfile, "w")
    o.write("#Associated PPF =\n") 
    o.write("#DFF:MSD\n")
    o.write("#Model Structure Data File    Energy = 0.0\n")
    pbc = system.pbc
    if len(pbc) >= 6:
        o.write("PBC: ")
        o.write("%9.4f%9.4f%9.4f"%(pbc[0], pbc[1], pbc[2]))
        o.write("%6.2f%6.2f%6.2f\n"%(pbc[3], pbc[4], pbc[5]))

    system.assignEleTypes()
    o.write("%-d\n"%len(system.atoms))
    n = 1
    for i in system.atoms:
        step = n
        atp1 = i.element
        atp2 = i.element
        atp3 = i.element
        an = ELEMENT2ATN[atp1]
        q = 0.0
        o.write("%-8d"%step)
        o.write("%5s"%atp1)
        o.write("%5d"%an)
        o.write("%5s"%atp2)
        o.write("%5s"%atp3)
        o.write("%10.4f"%q)
        o.write("%12.6f"%i.x[0])
        o.write("%12.6f"%i.x[1])
        o.write("%12.6f"%i.x[2])
        o.write(" 1  UNK  0\n")
        n += 1

    o.write("%-d\n"%len(system.connect))
    for i in system.connect:
        o.write("%-6d%-6d%4d\n"%(i[0], i[1], 1))
    o.write("#DFF:END\n")
    o.close()
        
    o.write
    o.close()

def toPoscar(system, outfile="POSCAR"):
    """Output the POSCAR file
    """
    ndxfile = 'index.ndx'
    s = system
    o = open(outfile, "w")
    ndx = open(ndxfile, 'w')
    ndx.write('# new-id old-id\n')
    o.write("%s\n"%s.name) 
    o.write("%20.15f\n"%s.scaleFactor)

    xx, xy, xz, yy, yz, zz = lattice2v(s.pbc)
    a = [xx, 0.0, 0.0]
    b = [xy, yy, 0.0]
    c = [xz, yz, zz]

    # write the cells
    for i in a:
        o.write("%20.15f"%i)
    o.write("\n")
    for i in b:
        o.write("%20.15f"%i)
    o.write("\n")
    for i in c:
        o.write("%20.15f"%i)
    o.write("\n")

    elements = {}
    elements_list = []
    # sort the coordinations according to element type
    for i in s.atoms:
        element = i.element
        if not element in elements.keys():
            elements[element] =[]
            elements_list.append(element)
        elements[element].append(i)
    
    for i in elements_list:
        o.write("%6s"%i)
    o.write("\n")

    for i in elements_list:
        o.write("%6d"%len(elements[i]))
    o.write("\n")
    o.write("Selective dynamics\n")
    o.write("Direct\n")
    coords = []
    coordsXr = []
    id_numbers = []
    natom = 0
    for i in elements_list:
        for j in elements[i]:
            coords.append(np.array(j.xFrac))
            coordsXr.append(j.xr)
            id_numbers.append(j.number)
            natom += 1

    for i in range(natom):
        ndx.write('%d %d\n'%(id_numbers[i], i+1))
        xf = coords[i][0]
        yf = coords[i][1]
        zf = coords[i][2]
        o.write("%20.15f%20.15f%20.15f"%(xf, yf, zf))
        xr = "T"
        yr = "T"
        zr = "T"
        if coordsXr[i][0] == 1:
            xr = "F"
        if coordsXr[i][1] == 1:
            yr = "F"
        if coordsXr[i][2] == 1:
            zr = "F"
        o.write("%4s%4s%4s\n"%(xr, yr, zr))
    o.write("\n")
    ndx.close()
    o.close()

def toJdft(system, outfile="coords"):
    """Output the Jdft file
    """
    s = system
    o = open(outfile, "w")

    xx, xy, xz, yy, yz, zz = lattice2v(s.pbc)
    xx = xx * A2Bohr
    xy = xy * A2Bohr
    xz = xz * A2Bohr
    yy = yy * A2Bohr
    yz = yz * A2Bohr
    zz = zz * A2Bohr
    
    a = [xx, xy, xz]
    b = [0., yy, 0.]
    c = [0., 0., zz]

    o.write("lattice \\")
    o.write("\n")
    for i in a:
        o.write("%20.15f"%i)
    o.write("\\")
    o.write("\n")
    for i in b:
        o.write("%20.15f"%i)
    o.write("\\")
    o.write("\n")
    for i in c:
        o.write("%20.15f"%i)
    o.write("\n")
    o.write("\n")
    o.write("coords-type lattice\n")

    coords = []
    coordsXr = []
    natom = 0
    for i in s.atoms:
        coords.append(np.array(i.xFrac))
        coordsXr.append(i.xr)
        natom += 1

    for i in range(natom):
        xf = coords[i][0]
        yf = coords[i][1]
        zf = coords[i][2]
        o.write("ion %2s %20.15f%20.15f%20.15f 0\n"%(
                s.atoms[i].element, xf, yf, zf))
    o.write("\n")
    o.close()

    o = open(outfile + "_cartesian", "w")
    o.write("lattice \\")
    o.write("\n")
    for i in a:
        o.write("%20.15f"%i)
    o.write("\\")
    o.write("\n")
    for i in b:
        o.write("%20.15f"%i)
    o.write("\\")
    o.write("\n")
    for i in c:
        o.write("%20.15f"%i)
    o.write("\n")
    o.write("\n")
    o.write("coords-type cartesian\n")

    coords = []
    coordsXr = []
    natom = 0
    for i in s.atoms:
        coords.append(np.array(i.x))
        coordsXr.append(i.xr)
        natom += 1

    for i in range(natom):
        x = coords[i][0] * A2Bohr
        y = coords[i][1] * A2Bohr
        z = coords[i][2] * A2Bohr
        o.write("ion %2s %20.15f%20.15f%20.15f 0\n"%(
                s.atoms[i].element, x, y, z))
    o.write("\n")
    o.close()

def toFullLammps(system, outfile="output.data"):
    """ output to lammps data file in full format
    """

    s = system
    o = open(outfile, 'w')
    o.write("# \n")
    o.write("\n")
    o.write("%d atoms\n"%s.n_atoms)
    o.write("%d bonds\n"%s.n_bonds)
    o.write("%d angles\n"%s.n_angles)
    o.write("%d dihedrals\n"%s.n_dihedrals)
    o.write("%d impropers\n\n"%s.n_impropers)

    o.write("%d atom types\n"%s.n_atomtypes)
    o.write("%d bond types\n"%s.n_bondtypes)
    o.write("%d angle types\n"%s.n_angletypes)
    o.write("%d dihedral types\n"%s.n_dihedraltypes)
    o.write("%d improper types\n\n"%s.n_impropertypes)

    pbc = s.pbc
    if len(pbc) >= 6:
        if pbc[3] == 90.0 and pbc[4] == 90 and pbc[5] == 90:
            o.write(" %12.4f %12.4f xlo xhi\n"%(0.0, pbc[0]))
            o.write(" %12.4f %12.4f ylo yhi\n"%(0.0, pbc[1]))
            o.write(" %12.4f %12.4f zlo zhi\n"%(0.0, pbc[2]))
        else:
            xx, xy, xz, yy, yz, zz = lattice2v(pbc)
            o.write(" %12.4 %12.4f xlo xhi\n"%(0.0, xx))
            o.write(" %12.4 %12.4f ylo yhi\n"%(0.0, yy))
            o.write(" %12.4 %12.4f zlo zhi\n"%(0.0, zz))
            o.write("%12.4f%12.4f%12.4f xy xz yz\n\n"%(xy, xz, yz))        
    else:
        print("Warning: No box found. Using a default box 5.0 * 5.0 * 5.0")
        o.write(" %9.4f %9.4f xlo xhi\n"%(-25.0, 25.0))
        o.write(" %9.4f %9.4f ylo yhi\n"%(-25.0, 25.0))
        o.write(" %9.4f %9.4f zlo zhi\n"%(-25.0, 25.0))

    o.write("\nMasses\n\n")
    counter = 1
    for i in s.atomtypes:
        # atom name 
        na = counter
        ele = s.atomtypes[na-1]
        o.write("%12d %12s # %s\n"%(na, ELEMENT2MASS[ele], ele))
        counter += 1 
    o.write("\n")
    o.write("Atoms\n")
    o.write("\n")

    counter = 1
    for i in s.atoms:
        line = ''
        line += "%12d"%counter
        line += "%12d"%i.resn
        line += "%6d"%i.type2
        line += "%12.6f"%i.charge
        line += "%12.6f"%i.x[0]
        line += "%12.6f"%i.x[1]
        line += "%12.6f"%i.x[2]
        line += "    #    "
        line += "%6s"%i.name
        line += "\n"
        o.write(line)
        counter += 1

    counter = 1
    if s.n_bonds > 0:
        o.write("\nBonds\n\n")
        for i in s.bonds:
            o.write("%12d"%counter)
            o.write("%12d"%i[1])
            o.write("%12d"%i[2])
            o.write("%12d"%i[3])
            o.write("\n")
            counter += 1

    counter = 1
    if s.n_angles > 0:
        o.write("\nAngles\n\n")
        for i in s.angles:
            o.write("%12d"%counter)
            o.write("%12d"%i[1])
            o.write("%12d"%i[2])
            o.write("%12d"%i[3])
            o.write("%12d"%i[4])
            o.write("\n")
            counter += 1

    counter = 1
    if s.n_dihedrals > 0:
        o.write("\nDihedrals\n\n")
        for i in s.dihedrals:
            o.write("%12d"%counter)
            o.write("%12d"%i[1])
            o.write("%12d"%i[2])
            o.write("%12d"%i[3])
            o.write("%12d"%i[4])
            o.write("%12d"%i[5])
            o.write("\n")
            counter += 1

    if len(s.ffparams) > 0:
        o.write("\n")
        for i in s.ffparams:
            o.write(i)
        o.write("\n")

    o.close()

def toCfg(system, outfile="out.cfg"):
    """Output the cfg file
    """
    s = system
    o = open(outfile, "w")
    o.write("Number of particles = %d\n"%len(s.atoms))
    o.write("A = 1.0 Angstrom (basic length-scale)\n")
    xx, xy, xz, yy, yz, zz = lattice2v(s.pbc)
    a = [xx, 0.0, 0.0]
    b = [xy, yy, 0.0]
    c = [xz, yz, zz]
    o.write("H0(1,1) = %.4f A\n"%a[0])
    o.write("H0(1,2) = %.4f A\n"%a[1])
    o.write("H0(1,3) = %.4f A\n"%a[2])
    o.write("H0(2,1) = %.4f A\n"%b[0])
    o.write("H0(2,2) = %.4f A\n"%b[1])
    o.write("H0(2,3) = %.4f A\n"%b[2])
    o.write("H0(3,1) = %.4f A\n"%c[0])
    o.write("H0(3,2) = %.4f A\n"%c[1])
    o.write("H0(3,3) = %.4f A\n"%c[2])
    o.write(".NO_VELOCITY.\n")
    o.write("entry_count = 3\n")
    
    elements = {}
    elements_list = []
    # sort the coordinations according to element type
    for i in s.atoms:
        element = i.element
        if not element in elements.keys():
            elements[element] =[]
            elements_list.append(element)
        elements[element].append(i)
    
    for i in elements_list:
        o.write("%d\n"%ELEMENT2ATN[i])
        o.write("%s\n"%i)
        for j in elements[i]:
            xf = j.xFrac[0]
            yf = j.xFrac[1]
            zf = j.xFrac[2]
            o.write("%20.15f%20.15f%20.15f\n"%(xf, yf, zf))
    o.close()

def toTowheecoords(system, outfile="towhee_coords"):
    """ output to towhee_coords file format
    """
    o = open(outfile, 'w')
    for i in system.atoms:
        line = ''
        line += "%25.15f"%i.x[0]
        line += "%25.15f"%i.x[1]
        line += "%25.15f"%i.x[2]
        if len(i.element) > 0:
            line += "%10s"%i.element
        else:
            line += "%10s"%i.name
        line += "\n"
        o.write(line)
    o.close()

